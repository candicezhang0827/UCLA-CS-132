# Vapor To VaporM

This project contains source code for a Translator for the Vapor intermediate representation into the VaporM Intermediate Representation, using an imported parser for vapor from the cs132 vapor ast.
* ```src/main/java/*```- Contains all the source files for the Translator.
* ```out/production/classes/V2VM.class``` - This is the entry point of the program. This directory contains all the compiled sources.
* ```testcases``` - Where the test files exist

### Source Code Breakdown

* ```V2VM``` - This is the main class. It first uses the vapor parser to parse the file and create a vapor program as an Abstract Syntax Tree. It then runs built translator and prints the generated vaporm code. Takes advatange of the [Visitor Design Pattern](https://sourcemaking.com/design_patterns/visitor)
* ```VMVar``` - The class that acts as a variable representation to store important information for liveness analysis and register allocation such as ranges and cross call information.
* ```LivenessAnalysis``` - The visitor that runs through the vapor AST to store a context of liveness information for all variables in the given function.
* ```LSRA``` - An implementation of the Linear Scan Register Allocator that takes in the liveness information and assigns registers and stack locations for every variable in the given function.
* ```TranslatorVisitor``` - The visitor that goes through the vapor AST to create a list of strings representing a line of vaporm code per element. Starts by setting up the segment data and then going through each function in the program and running the register allocator to then use the mapped information for register and stack allocation.

### How to build

From the root of the project, run gradle.

```bash
$ gradle build
```

### How to test

The tests are just those provided with the assignment.
This testing framework also creates a buildable distribution based on student ID for submission. You can add your own tests by creating files in the ```testcases``` directory.
```bash
$ gradle :pregrade
```
