# MiniJava To Vapor

This project contains source code for a Translator for the MiniJava language into the Vapor Intermediate Representation, using an autogenerated Parser from JTB.
* ```src/main/java/*```- Contains all the source files for the Translator.
* ```out/production/classes/J2V.class``` - This is the entry point of the program. This directory contains all the compiled sources.
* ```testcases``` - Where the test files exist

### Source Code Breakdown

* ```J2V``` - This is the main class, which builds the global Context Table by first parsing the test file from ```stdin```, creating an Abstract Syntax Tree and then performing DFS to store all contexts. It then performs a second DFS run through the AST to translate the program into Vapor given the global context. Takes advatange of the [Visitor Design Pattern](https://sourcemaking.com/design_patterns/visitor)
* ```VMethod``` - The wrapper for all supported method declarations in MiniJava. Helps in keeping a method scope.
* ```VClass``` - The wrapper for all supported class declarations in MiniJava. Helps in keeping a class scope.
* ```ContextVisitor``` - A void depth first visitor that builds out the context table, as a map from the classname to the class object.
* ```TranslatorVisitor``` - A depth first visitor that translates by passing the context and returning blocks of vapor code as a list of strings. This essentially builds an AST for Vapor for easy printing in J2V.


### How to build

From the root of the project, run gradle.

```bash
$ gradle build
```

### How to test

The tests present are a mixture of those provided by the class, myself and Ray Zhang.
This testing framework also creates a buildable distribution based on student ID for submission. You can add your own tests by creating files in the ```testcases``` directory.
```bash
$ gradle :pregrade
```
