const vmt_LS
	:LS.Start
	:LS.Print
	:LS.Search
	:LS.Init
func Main()
	t.0 = HeapAllocZ(12)
	[t.0] = :vmt_LS
	if t.0 goto :null1
		Error("null pointer")
	null1:
	t.1 = [t.0]
	t.2 = [t.1+0]
	t.3 = call t.2(t.0 10)
	PrintIntS(t.3)
	ret
func LS.Start(this sz)
	t.0 = [this]
	t.1 = [t.0+12]
	t.2 = call t.1(this sz)
	aux01 = t.2
	t.3 = [this]
	t.4 = [t.3+4]
	t.5 = call t.4(this)
	aux02 = t.5
	PrintIntS(9999)
	t.6 = [this]
	t.7 = [t.6+8]
	t.8 = call t.7(this 8)
	PrintIntS(t.8)
	t.9 = [this]
	t.10 = [t.9+8]
	t.11 = call t.10(this 12)
	PrintIntS(t.11)
	t.12 = [this]
	t.13 = [t.12+8]
	t.14 = call t.13(this 17)
	PrintIntS(t.14)
	t.15 = [this]
	t.16 = [t.15+8]
	t.17 = call t.16(this 50)
	PrintIntS(t.17)
	ret 55
func LS.Print(this)
	j = 1
	while1_top:
	t.0 = [this+8]
	t.1 = LtS(j t.0)
	if0 t.1 goto :while1_end
		t.2 = [this+4]
		if t.2 goto :null2
			Error("null pointer")
		null2:
		t.3 = [t.2]
		t.3 = Lt(j t.3)
		if t.3 goto :bounds1
			Error("array index out of bounds")
		bounds1:
		t.3 = MulS(j 4)
		t.3 = Add(t.3 t.2)
		t.4 = [t.3 + 4]
		PrintIntS(t.4)
		t.5 = Add(j 1)
		j = t.5
		goto :while1_top
	while1_end:
	ret 0
func LS.Search(this num)
	j = 1
	ls01 = 0
	ifound = 0
	while2_top:
	t.0 = [this+8]
	t.1 = LtS(j t.0)
	if0 t.1 goto :while2_end
		t.2 = [this+4]
		if t.2 goto :null3
			Error("null pointer")
		null3:
		t.3 = [t.2]
		t.3 = Lt(j t.3)
		if t.3 goto :bounds2
			Error("array index out of bounds")
		bounds2:
		t.3 = MulS(j 4)
		t.3 = Add(t.3 t.2)
		t.4 = [t.3 + 4]
		aux01 = t.4
		t.5 = Add(num 1)
		aux02 = t.5
		t.6 = LtS(aux01 num)
		if0 t.6 goto :if1_else
		nt = 0
			goto :if1_end
		if1_else:
		t.7 = LtS(aux01 aux02)
		t.8 = Sub(t.7 1)
		if0 t.8 goto :if2_else
		nt = 0
			goto :if2_end
		if2_else:
			ls01 = 1
			ifound = 1
			t.9 = [this+8]
			j = t.9
		if2_end:
		if1_end:
		t.10 = Add(j 1)
		j = t.10
		goto :while2_top
	while2_end:
	ret ifound
func LS.Init(this sz)
	[this+8] = sz
	t.2 = call :AllocArray(sz)
	[this+4] = t.2
	j = 1
	t.3 = [this+8]
	t.4 = Add(t.3 1)
	k = t.4
	while3_top:
	t.5 = [this+8]
	t.6 = LtS(j t.5)
	if0 t.6 goto :while3_end
		t.7 = MulS(2 j)
		aux01 = t.7
		t.8 = Sub(k 3)
		aux02 = t.8
		t.10 = [this+4]
		if t.10 goto :null4
			Error("null pointer")
		null4:
		t.11 = [t.10]
		t.11 = Lt(j t.11)
		if t.11 goto :bounds3
			Error("array index out of bounds")
		bounds3:
		t.11 = MulS(j 4)
		t.11 = Add(t.11 t.10)
		t.12 = Add(aux01 aux02)
		[t.11 + 4] = t.12
		t.13 = Add(j 1)
		j = t.13
		t.14 = Sub(k 1)
		k = t.14
		goto :while3_top
	while3_end:
	ret 0


func AllocArray(size)
	bytes = MulS(size 4)
	bytes = Add(bytes 4)
	v = HeapAllocZ(bytes)
	[v] = size
	ret v
